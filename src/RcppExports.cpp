// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// betaToMaxCpp
double betaToMaxCpp(NumericMatrix kU, IntegerVector kY, NumericMatrix kBeta, NumericVector kLambda, NumericMatrix kX, NumericMatrix kZ);
RcppExport SEXP mnmcem_betaToMaxCpp(SEXP kUSEXP, SEXP kYSEXP, SEXP kBetaSEXP, SEXP kLambdaSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type kU(kUSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type kY(kYSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kBeta(kBetaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type kLambda(kLambdaSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kX(kXSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kZ(kZSEXP );
        double __result = betaToMaxCpp(kU, kY, kBeta, kLambda, kX, kZ);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// lambdaMaxCpp
NumericVector lambdaMaxCpp(NumericMatrix kU);
RcppExport SEXP mnmcem_lambdaMaxCpp(SEXP kUSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type kU(kUSEXP );
        NumericVector __result = lambdaMaxCpp(kU);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// loglikelihoodCpp
double loglikelihoodCpp(NumericMatrix kU, IntegerVector kY, NumericMatrix kBeta, NumericVector kLambda, NumericMatrix kX, NumericMatrix kZ);
RcppExport SEXP mnmcem_loglikelihoodCpp(SEXP kUSEXP, SEXP kYSEXP, SEXP kBetaSEXP, SEXP kLambdaSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type kU(kUSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type kY(kYSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kBeta(kBetaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type kLambda(kLambdaSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kX(kXSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kZ(kZSEXP );
        double __result = loglikelihoodCpp(kU, kY, kBeta, kLambda, kX, kZ);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// logRatioCpp
double logRatioCpp(NumericMatrix kU, IntegerVector kY, NumericMatrix kBeta, NumericVector kLambda, NumericMatrix kX, NumericMatrix kZ);
RcppExport SEXP mnmcem_logRatioCpp(SEXP kUSEXP, SEXP kYSEXP, SEXP kBetaSEXP, SEXP kLambdaSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type kU(kUSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type kY(kYSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kBeta(kBetaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type kLambda(kLambdaSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kX(kXSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kZ(kZSEXP );
        double __result = logRatioCpp(kU, kY, kBeta, kLambda, kX, kZ);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// qFunction2
double qFunction2(NumericMatrix kU, IntegerVector kY, NumericMatrix kBeta, NumericVector kLambda, NumericMatrix kX, NumericMatrix kZ);
RcppExport SEXP mnmcem_qFunction2(SEXP kUSEXP, SEXP kYSEXP, SEXP kBetaSEXP, SEXP kLambdaSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type kU(kUSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type kY(kYSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kBeta(kBetaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type kLambda(kLambdaSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kX(kXSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kZ(kZSEXP );
        double __result = qFunction2(kU, kY, kBeta, kLambda, kX, kZ);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// qFunctionCpp
double qFunctionCpp(NumericMatrix kU, IntegerVector kY, NumericMatrix kBeta, NumericVector kLambda, NumericMatrix kX, NumericMatrix kZ);
RcppExport SEXP mnmcem_qFunctionCpp(SEXP kUSEXP, SEXP kYSEXP, SEXP kBetaSEXP, SEXP kLambdaSEXP, SEXP kXSEXP, SEXP kZSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type kU(kUSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type kY(kYSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kBeta(kBetaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type kLambda(kLambdaSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kX(kXSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kZ(kZSEXP );
        double __result = qFunctionCpp(kU, kY, kBeta, kLambda, kX, kZ);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP mnmcem_rcpp_hello_world() {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        List __result = rcpp_hello_world();
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// uSamplerCpp
NumericMatrix uSamplerCpp(NumericMatrix kU, IntegerVector kY, NumericMatrix kBeta, NumericVector kLambda, NumericMatrix kX, NumericMatrix kZ, int B, double kC0);
RcppExport SEXP mnmcem_uSamplerCpp(SEXP kUSEXP, SEXP kYSEXP, SEXP kBetaSEXP, SEXP kLambdaSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP kC0SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type kU(kUSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type kY(kYSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kBeta(kBetaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type kLambda(kLambdaSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kX(kXSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kZ(kZSEXP );
        Rcpp::traits::input_parameter< int >::type B(BSEXP );
        Rcpp::traits::input_parameter< double >::type kC0(kC0SEXP );
        NumericMatrix __result = uSamplerCpp(kU, kY, kBeta, kLambda, kX, kZ, B, kC0);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// uSamplerRWCpp
NumericMatrix uSamplerRWCpp(NumericMatrix kU, IntegerVector kY, NumericMatrix kBeta, NumericVector kLambda, NumericMatrix kX, NumericMatrix kZ, int B, double sd);
RcppExport SEXP mnmcem_uSamplerRWCpp(SEXP kUSEXP, SEXP kYSEXP, SEXP kBetaSEXP, SEXP kLambdaSEXP, SEXP kXSEXP, SEXP kZSEXP, SEXP BSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericMatrix >::type kU(kUSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type kY(kYSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kBeta(kBetaSEXP );
        Rcpp::traits::input_parameter< NumericVector >::type kLambda(kLambdaSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kX(kXSEXP );
        Rcpp::traits::input_parameter< NumericMatrix >::type kZ(kZSEXP );
        Rcpp::traits::input_parameter< int >::type B(BSEXP );
        Rcpp::traits::input_parameter< double >::type sd(sdSEXP );
        NumericMatrix __result = uSamplerRWCpp(kU, kY, kBeta, kLambda, kX, kZ, B, sd);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
